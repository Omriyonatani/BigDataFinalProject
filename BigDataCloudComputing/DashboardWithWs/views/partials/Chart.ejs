<div class="card">
  <div class="card-header card-header-success">
    <h4 class="card-title">waiting Calls </h4>
    <!-- <p class="card-category">New employees on 15th September, 2016</p> -->
  </div>
  <div style="width: auto; overflow-x: scroll ">
    <div style="width:7000px; height:auto">
      <canvas id="myChart" width="2000" height="100"></canvas>
    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    var socket = io.connect();

  </script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    //creating the time array with 5 min' aggregation
    function getTimeRanges(interval, language = window.navigator.language) {
      const ranges = [];
      const date = new Date();
      const format = {
        hour: 'numeric',
        minute: 'numeric',
      };

      for (let minutes = 0; minutes < 24 * 60; minutes = minutes + interval) {
        date.setHours(0);
        date.setMinutes(minutes);
        ranges.push(date.toLocaleTimeString(language, format));
      }

      return ranges;
    }

    async function insertWatingCalls(){
      return new Promise (res=>{
        socket.on("totalWaitingCalls", (msg)=> {
          res(msg.value);
        });
      });      
    }
   
    
     
   function startFromNow(){
    let i=0;
    let newPoint=[];
    var today = new Date();
    const labels = getTimeRanges(5, 'ru')
    var TimeInMin = (parseInt(today.getHours()) * 60) + parseInt(today.getMinutes());
    while(i< labels.length){

      var labelsInMin = (parseInt(labels[i].split(":")[0]) * 60) + parseInt(labels[i].split(":")[1]);
      if (TimeInMin > labelsInMin) {
        newPoint.push(0);
      }
      else{
        break;
      }
      i+=1;
    }
    return newPoint;
  }

  let newPoint1 = startFromNow();
  const labels1 = getTimeRanges(5, 'ru')

    const data = {
      labels: labels1,
      datasets: [{
        backgroundColor: 'rgb(255, 99, 132)',
        borderColor: 'rgb(255, 99, 132)',
        data: newPoint1,
      }, ]
    };

    const config = {
      type: 'line',
      data: data,
      options: {
        plugins: {
          legend: {
            display: false,
          }
        },
        scales: {
          y: {
            min: 0,
            max: 200
          }
        }

      }
    };

    const myChart = new Chart(
      document.getElementById('myChart'), config);

    function addData(chart= myChart) {
      chart.data.datasets.forEach((dataset) => {
        insertWatingCalls().then(data=>{ 
        dataset.data.push(data);
        })
     
      });
      myChart.update();
      setTimeout(addData,30000)
    }
    addData(myChart);
  </script>
</div>

<div class="card">
  <div class="card-header card-header-warning card-header-primary">
    <h4 class="card-title">Waiting Call time</h4>
  </div>
  <div style="width: auto; overflow-x: scroll ">
    <div style="width:7000px; height:auto">
      <canvas id="myChart2" width="2000" height="100"></canvas>
    </div>
  </div>
  <script>
    const labels2 = getTimeRanges(5, 'ru')
    
    async function insertWatingTimeSum(){
      return new Promise (res=>{
        socket.on("waiting time", (msg)=> {
          res(msg.value);
        });
      });      
    }
    let newPoint2 = startFromNow();
    const data2 = {
      labels: labels2,
      datasets: [{
        backgroundColor: 'rgba(95,158,160,1)',
        borderColor: 'rgb(33, 99, 132)',
        data: newPoint2,
        
      }]
    };

    const config2 = {
      type: 'bar',
      data: data2,
      options: {
        plugins: {
          legend: {
            display: false,
          }
        },
      }
    };
    const myChart2 = new Chart(document.getElementById('myChart2'),config2);
    
    function updateWaitingTimeSum(chart= myChart2 ) {
      chart.data.datasets.forEach((dataset) => {
        insertWatingTimeSum().then(data=>{ 
        dataset.data.push(data);
        
        // dataset.backgroundColor.push(`rgba(
        //                                 ${Math.floor(Math.random() * 255)},
        //                                 ${Math.floor(Math.random() * 255)},
        //                                 ${Math.floor(Math.random() * 255)}, 1)`)
        })
     
      });
      myChart2.update();
      setTimeout( updateWaitingTimeSum,30000)
    }
   
    updateWaitingTimeSum(myChart2);


  </script>
</div>


<div class="card " style="width: 20rem;">
  <div class="card-header card-header-tabs card-header-primary">
    <h4 class="card-title">Call Topic</h4>
  </div>
  <div>
    <canvas id="myChart3" width="350" height="350"></canvas>
  </div>
  <script>
    let callsTopics= [1,1,1,1]

    async function insertCallsTopic(){
      return new Promise (res=>{
        socket.on("calls topics", (msg)=> {
          res(msg.value);
        });
      });      
    }
      const data3 = {
      labels: [
        'Join',
        'disconnect',
        'service',
        'report'
      ],
      datasets: [{
        label: 'Call Topic',
        data: callsTopics,
        backgroundColor: [
          'rgb(255, 99, 132)',
          'rgb(54, 162, 235)',
          'rgb(255, 205, 86)',
          'rgb(0, 102, 102)'
        ],
        hoverOffset: 8,
      }],

    };

    const config3 = {
      type: 'doughnut',
      data: data3,

    };

 
    const myChart3 = new Chart(document.getElementById('myChart3'),config3);
    
    function updateTopics(chart= myChart3) {
      chart.data.datasets.forEach((dataset) => {
        insertCallsTopic().then(data=>{ 
        dataset.data = data;
        })
     
      });
      myChart3.update();
      setTimeout(updateTopics,30000)
    }
    updateTopics();
  </script>
</div>
