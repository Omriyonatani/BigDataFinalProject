<div class="card">
  <div class="card-header card-header-success">
    <h4 class="card-title">waiting Calls </h4>
    <!-- <p class="card-category">New employees on 15th September, 2016</p> -->
  </div>
  <div style="width: auto; overflow-x: scroll ">
    <div style="width:7000px; height:auto">
      <canvas id="myChart" width="2000" height="100"></canvas>
    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    var socket = io.connect();
  </script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    //creating the time array with 5 min' aggregation
    function getTimeRanges(interval, language = window.navigator.language) {
      const ranges = [];
      const date = new Date();
      const format = {
        hour: 'numeric',
        minute: 'numeric',
      };

      for (let minutes = 0; minutes < 24 * 60; minutes = minutes + interval) {
        date.setHours(0);
        date.setMinutes(minutes);
        ranges.push(date.toLocaleTimeString(language, format));
      }
      return ranges;
    }

    // Get "Total waiting calls" from the socket and update the chart & save it on the session storage (browser storage)
    async function insertWaitingCalls(){
      return new Promise (res=>{ 
        socket.on("totalWaitingCalls", (msg)=> {
          var today = new Date();
          var TimeInMin = (parseInt(today.getHours()) * 60) + parseInt(today.getMinutes());
          sessionStorage.setItem(`total Waiting Calls at ${TimeInMin}`,msg.value); // browsser storage 
          res(msg.value);
        });
      });      
    }
   
    // initiallize the graphs with 5 mins aggregate from 00:00 to now..  
    function startFromNow(str){
      let i=0;
      let newPoint=[];
      const labels = getTimeRanges(5, 'ru'); // aggregation 5 mins
      var today = new Date();
      var TimeInMin = (parseInt(today.getHours()) * 60) + parseInt(today.getMinutes());

      // from 00:00 to now- everything is initillize to be the number from the session-storage OR zero (0)
      while(i < labels.length){
        var labelsInMin = (parseInt(labels[i].split(":")[0]) * 60) + parseInt(labels[i].split(":")[1]);
        if ( TimeInMin  >= labelsInMin ) {
          // update the time that we over.. 
          var data_from_storage = sessionStorage.getItem(`${str} at ${labelsInMin}`);
          if(data_from_storage != null ){
            newPoint.push(data_from_storage);
          } else { // find the saved data in the session storage at the last 5 mins 
           let arr = [];
            for(let j=5;j>0;j--){ // go to the last 4 mins and check if there some saved value in he session storage
                data_from_storage = sessionStorage.getItem(`${str} at ${(labelsInMin-j)}`);
                if(data_from_storage != null && (parseInt(data_from_storage)!=0 ))  {
                  arr.push(parseInt(data_from_storage))
                }else{
                    continue;
                }
            }
            
            if(arr.length == 0){
              newPoint.push(0)
            }else{
              newPoint.push(Math.min(...arr))
            }
            
          }
        }else{
          break;
        }
        i+=1;
      }
      return newPoint;
    }


    let newPoint1 = startFromNow("total Waiting Calls").slice(0,-1);
    const labels1 = getTimeRanges(5, 'ru')

    const data = {
      labels: labels1,
      datasets: [{
        backgroundColor: 'rgb(255, 99, 132)',
        borderColor: 'rgb(255, 99, 132)',
        data: newPoint1,
      }, ]
    };

    const config = {
      type: 'line',
      data: data,
      options: {
        plugins: {
          legend: {
            display: false,
          }
        },
        scales: {
          y: {
            min: 0,
            max: 200
          }
        }
      }
    };

    const myChart = new Chart(document.getElementById('myChart'), config);

    function updateData(chart= myChart) {
      chart.data.datasets.forEach((dataset) => {
        insertWaitingCalls().then(data=>{ 
          
          dataset.data.push(data);
          
          myChart.update();
        })
      });
      

    }
  </script>
</div>

<!-- Graph 2 -->
<div class="card">
  <div class="card-header card-header-warning card-header-primary">
    <h4 class="card-title">Waiting Call time</h4>
  </div>
  <div style="width: auto; overflow-x: scroll ">
    <div style="width:7000px; height:auto">
      <canvas id="myChart2" width="2000" height="100"></canvas>
    </div>
  </div>
  <script>
    const labels2 = getTimeRanges(5, 'ru')
  
    // Waiting time from the start of the day.. 
    async function insertWaitingTimeSum(){
      return new Promise (res=>{
        socket.on("waiting time", (msg)=> {
          var today = new Date();
          var TimeInMin = (parseInt(today.getHours()) * 60) + parseInt(today.getMinutes());
          sessionStorage.setItem(`waiting time at ${TimeInMin}`,msg.value);
          res(msg.value);
        });
      });      
    }

    let newPoint2 = startFromNow("waiting time").slice(0,-1);
    const data2 = {
      labels: labels2,
      datasets: [{
        backgroundColor: 'rgba(95,158,160,1)',
        borderColor: 'rgb(33, 99, 132)',
        data: newPoint2,
      }]
    };

    const config2 = {
      type: 'bar',
      data: data2,
      options: {
        plugins: {
          legend: {
            display: false,
          }
        },
      }
    };

    const myChart2 = new Chart(document.getElementById('myChart2'),config2);

    // Function that takes the socket data, insert to dataset of the chart and then updates the chart.
    function updateWaitingTimeSum(chart= myChart2 ){
      chart.data.datasets.forEach((dataset) => {
        insertWaitingTimeSum().then(data=>{ 
        dataset.data.push(data);
          myChart2.update();
       })
        
      });
    }

  </script>
</div>

<!-- Graph 3 -->
<div class="card " style="width: 20rem;">
  <div class="card-header card-header-tabs card-header-primary">
    <h4 class="card-title">Call Topic</h4>
  </div>
  <div>
    <canvas id="myChart3" width="350" height="350"></canvas>
  </div>

  <script>
    var storage_topics= sessionStorage.getItem(`topics`);
    let callsTopics=[] ;
    if (storage_topics != null ) {
      let callsTopics1 = storage_topics.split(',');
      callsTopics= [callsTopics1[0],callsTopics1[1],callsTopics1[2],callsTopics1[3]]
    }else{
      callsTopics= [1,1,1,1];
    }

    // listening to web socket, takes the data- and put it in the session storage, and return it to the table. 
    async function insertCallsTopic(){
      return new Promise (res=>{
        socket.on("calls topics", (msg)=> {
          sessionStorage.setItem(`topics`,msg.value)
          res(msg.value);
        });
      });
    }

    const data3 = {
      labels: [
        'Join',
        'disconnect',
        'service',
        'report'
      ],
      datasets: [{
        label: 'Call Topic',
        data: callsTopics,
        backgroundColor: [
          'rgb(255, 99, 132)',
          'rgb(54, 162, 235)',
          'rgb(255, 205, 86)',
          'rgb(0, 102, 102)'
        ],
        hoverOffset: 8,
      }],
    };

    const config3 = {
      type: 'doughnut',
      data: data3,

    };

    const myChart3 = new Chart(document.getElementById('myChart3'),config3);
    
    function updateTopics(chart= myChart3){
      chart.data.datasets.forEach((dataset) =>{
        insertCallsTopic().then(data=>{ 
        dataset.data = data;
        })
      });
      myChart3.update();
      setTimeout(updateTopics, 60000)
    }

    // Update everything every 5 mins.. 
    function updateAllCharts(){
     
      var today = new Date();
      var TimeInSec = ((parseInt(today.getMinutes()) % 5)*60 + parseInt(today.getSeconds())); // check the time modulo 5
      var fiveMin = (5*60 - (TimeInSec))*1000; // update the chart with the time remaining.. 
      updateWaitingTimeSum();
      updateData();
      setTimeout(updateAllCharts, fiveMin)
      
    }
    updateTopics();
    updateAllCharts();
  </script>
</div>
